name: Create Docusaurus pipleine

on:
  workflow_dispatch:
    inputs:
      push_image:
        description: If the image should be pushed
        type: boolean
        default: false

jobs:
  checks:
    runs-on: ubuntu-latest
    container:  zepben/docusaurus
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Work around git permission issue
        run: |
          dname=$(echo ${{github.repository}} | cut -d'/' -f2)
          git config --global --add safe.directory /__w/$dname/$dname
        shell: sh

      - name: Check that build works
        run: |
          # use templates from the current branch
          cd docs
          ../templates/build-docs.sh

  parse-inputs:
    # needs: [checks]
    runs-on: ubuntu-latest
    container:  zepben/pipeline-basic
    outputs:
      git_tag: ${{ steps.tags.outputs.git_tag }}
    steps:

      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Work around git permission issue
        run: |
          dname=$(echo ${{github.repository}} | cut -d'/' -f2)
          git config --global --add safe.directory /__w/$dname/$dname
        shell: sh

      - name: Delete release branch
        run: |
          # If the `release` branch already exists, remove it
          git push origin -d release
        continue-on-error: true 

      - name: Create release branch
        run: |
          git config remote.origin.fetch "+refs/heads/*:refs/remotes/origin/*"
          git fetch -v origin
          git checkout -b release
        shell: bash

      - name: Figure out the tag for the build
        id: tags
        shell: bash
        run: |
          version=$(cat changelog.md | grep UNRELE | grep -o "[0-9]\+\.[0-9]\+\.[0-9]\+")
          source /scripts/common.sh
          check_tag_exists "${version}"

          if [ ${GITHUB_REF_NAME} == "main" ]; then
            echo "git_tag=${version}" >> "${GITHUB_OUTPUT}"
          else
            echo "git_tag=test-${GITHUB_REF_NAME}" >> "${GITHUB_OUTPUT}"
          fi

      - name: Update changelog and commit release branch
        shell: bash
        if: ${{ github.ref_name == 'main' }}
        run: |
          source /scripts/common.sh
          sed -i "s/UNRELEASED/$(date +'%Y-%m-%d')/g" changelog.md
          # Update changelog version
          incr_version minor ${{ steps.tags.outputs.git_tag }}
          release_notes_template="### Breaking Changes\n* None.\n\n### New Features\n* None.\n\n### Enhancements\n* None.\n\n### Fixes\n* None.\n\n### Notes\n* None.\n"
          sed -i "/^# .*/a ## [${new_version}] - UNRELEASED\n$release_notes_template" changelog.md

          stage_file changelog.md

          # Reset new_version to the unreleased yet tag
          new_version=${{ steps.tags.outputs.git_tag }}
          # Push release branch to repo
          commit_finalize_version

  build-docusaurus-pipeline:
    runs-on: ubuntu-latest
    needs: [parse-inputs]
    env:
      DOCKER_HUB_USER: ${{ secrets.DOCKER_HUB_USER }}
      DOCKER_HUB_ACCESS_TOKEN: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Container Registry
        uses: docker/login-action@v3
        with:
          registry: docker.io
          username: ${{ env.DOCKER_HUB_USER }}
          password: ${{ env.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Get SHAs
        id: sha
        run: |
          SHORT_REF=$(git rev-parse --short HEAD)
          echo "short_ref=$SHORT_REF" >> $GITHUB_OUTPUT

      # Priority sorting determines the tag used in the OCI label
      # The current order preferences the version, then commit, then any special tags
      # We always push a commit based tag
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: zepben/pipeline-docusaurus
          labels: |
            org.opencontainers.image.vendor=Zepben
            org.opencontainers.image.version=${{ needs.parse-inputs.outputs.git_tag }}
          tags: |
            type=raw,value=sha-${{ steps.sha.outputs.short_ref }},priority=200
            type=raw,value=${{ needs.parse-inputs.outputs.git_tag }},priority=900
            type=raw,value=latest,enable=${{ github.ref_name == 'main' }},priority=100

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: "./pipelines/Docusaurus"
          push: ${{ inputs.push_image }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  finalise-version:
    runs-on: ubuntu-latest
    if: ${{ github.ref_name == 'main' }}
    container: zepben/pipeline-basic
    needs: [build-docusaurus-pipeline]
    env:
      GITHUB_TOKEN: ${{ secrets.CI_GITHUB_TOKEN }}
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ env.GITHUB_TOKEN }}

      - name: Work around git permission issue
        run: |
          dname=$(echo ${{github.repository}} | cut -d'/' -f2)
          git config --global --add safe.directory /__w/$dname/$dname
        shell: sh

      - name: Merge and tag
        shell: bash
        id: tag
        run: |
          # Merge and tag, and delete release branch
          git config remote.origin.fetch "+refs/heads/*:refs/remotes/origin/*"
          git fetch --all
          git branch -a
          git merge origin/release
          git push origin ${GITHUB_REF/refs\/heads\//}
          git tag "${{ needs.precheck.outputs.git_tag }}"
          git push --tags
          git push origin -d release
